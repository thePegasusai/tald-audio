version: "3.9"

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3000:3000"
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=tald_unia
      - DB_USER_FILE=/run/secrets/db-user
      - DB_PASSWORD_FILE=/run/secrets/db-password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_FILE=/run/secrets/jwt-secret
      - API_KEY_FILE=/run/secrets/api-key
      - TZ=UTC
    volumes:
      - ai-models:/app/models:ro
      - audio-cache:/app/cache
      - /tmp/core-dumps:/tmp/core-dumps:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
        reservations:
          cpus: "1"
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
      - seccomp=default
    read_only: true
    networks:
      - tald-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tald_unia
      - POSTGRES_USER_FILE=/run/secrets/db-user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db-user) -d tald_unia"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
    security_opt:
      - no-new-privileges:true
    networks:
      - tald-network

  redis:
    image: redis:7.2-alpine
    command: redis-server --requirepass $$(cat /run/secrets/redis-password)
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    security_opt:
      - no-new-privileges:true
    networks:
      - tald-network

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
    networks:
      - tald-network

  grafana:
    image: grafana/grafana:9.5.0
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana-admin-password
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
    networks:
      - tald-network

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  ai-models:
    driver: local
    driver_opts:
      type: none
      device: /data/models
      o: bind
  audio-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  tald-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      encrypt: "true"

secrets:
  db-user:
    file: ./secrets/db_user.txt
  db-password:
    file: ./secrets/db_password.txt
  redis-password:
    file: ./secrets/redis_password.txt
  jwt-secret:
    file: ./secrets/jwt_secret.txt
  api-key:
    file: ./secrets/api_key.txt
  grafana-admin-password:
    file: ./secrets/grafana_admin_password.txt