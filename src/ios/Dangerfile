# TALD UNIA iOS Dangerfile
# Version: 1.0.0
# Purpose: Automated code review for audio processing and AI components

# Import required Danger plugins
# danger v9.4.0
require 'danger'
# danger-swiftlint v0.34.0
require 'danger-swiftlint'

# Constants
SWIFTLINT_CMD = 'bundle exec swiftlint'
MODIFIED_FILES = git.modified_files + git.added_files
TESTS_PATH = 'TALDUniaTests/'
MAX_FILE_SIZE = 1024 * 1024  # 1MB
MIN_TEST_COVERAGE = 0.85
AUDIO_BUFFER_SIZE = 256
MAX_PROCESSING_LATENCY = 10

# SwiftLint configuration
swiftlint.config_file = '.swiftlint.yml'
swiftlint.binary_path = SWIFTLINT_CMD
swiftlint.lint_files inline_mode: true

# Check for PR description
fail "Please provide a summary in the Pull Request description" if github.pr_body.length < 10

# File size validation
MODIFIED_FILES.each do |file|
  next unless File.file?(file)
  size = File.size(file)
  warn "#{file} is larger than #{MAX_FILE_SIZE/1024}KB" if size > MAX_FILE_SIZE
end

def check_test_coverage
  modified_swift_files = MODIFIED_FILES.select { |file| file.end_with?('.swift') }
  
  modified_swift_files.each do |file|
    base_name = File.basename(file, '.swift')
    test_file = "#{TESTS_PATH}#{base_name}Tests.swift"
    
    if file.include?('/Audio/') || file.include?('/DSP/')
      warn "Audio processing file #{file} missing tests" unless File.exist?(test_file)
      warn "Performance tests required for audio processor" unless File.read(test_file).include?('func testPerformance')
      warn "Real-time processing validation required" unless File.read(test_file).include?('testRealTimeProcessing')
    end
    
    if file.include?('/AI/') || file.include?('/ML/')
      warn "AI component #{file} missing tests" unless File.exist?(test_file)
      warn "Model validation tests required" unless File.read(test_file).include?('testModelValidation')
      warn "Memory management tests required" unless File.read(test_file).include?('testMemoryManagement')
    end
  end
end

def check_audio_implementations
  audio_files = MODIFIED_FILES.select { |file| file.include?('/Audio/') || file.include?('/DSP/') }
  
  audio_files.each do |file|
    content = File.read(file)
    
    warn "Audio processor missing AudioProcessing protocol" unless content.include?('AudioProcessing')
    warn "SIMD optimization recommended for audio processing" unless content.include?('SIMD')
    warn "Buffer size validation required" unless content.include?('validateBufferSize')
    fail "Real-time processing constraints violation" if content.include?('Thread.sleep')
    warn "Thread-safe implementation required" unless content.include?('@threadSafe')
  end
end

def check_ai_models
  ai_files = MODIFIED_FILES.select { |file| file.include?('/AI/') || file.include?('/ML/') }
  
  ai_files.each do |file|
    content = File.read(file)
    
    warn "Model validation missing" unless content.include?('validateModel')
    warn "Model version check required" unless content.include?('modelVersion')
    fail "Memory management pattern missing" unless content.include?('deinit')
    warn "Error handling implementation required" unless content.include?('catch')
    warn "Performance optimization recommended" unless content.include?('@performanceCritical')
  end
end

# Execute checks
check_test_coverage
check_audio_implementations
check_ai_models

# Project structure validation
warn "Xcode project file was modified" if git.modified_files.include?("TALDUnia.xcodeproj/project.pbxproj")

# Performance critical checks
MODIFIED_FILES.each do |file|
  next unless File.file?(file)
  content = File.read(file)
  
  if content.include?('@performanceCritical')
    warn "Performance critical method should include benchmark tests" unless content.include?('XCTAssertLessThan')
  end
  
  if file.include?('/Audio/')
    fail "Audio processing latency exceeds limit" if content.match(/processingLatency.*#{MAX_PROCESSING_LATENCY}/)
    warn "Audio buffer size validation missing" unless content.include?("bufferSize == #{AUDIO_BUFFER_SIZE}")
  end
end

# Documentation checks
MODIFIED_FILES.each do |file|
  next unless file.end_with?('.swift')
  content = File.read(file)
  
  warn "Missing documentation for public interface" if content.match(/public (class|struct|enum)/) && !content.include?('///')
  warn "Missing parameter documentation" if content.include?('public func') && !content.match(/- Parameter/)
end

# Test file validation
test_files = MODIFIED_FILES.select { |file| file.include?('Tests/') }
test_files.each do |file|
  content = File.read(file)
  
  warn "Test file missing XCTestCase" unless content.include?('XCTestCase')
  warn "Insufficient test coverage" if content.scan(/func test/).count < 3
end

# Thread safety validation
MODIFIED_FILES.each do |file|
  next unless file.end_with?('.swift')
  content = File.read(file)
  
  if content.include?('concurrent') || content.include?('async')
    warn "Thread safety measures required" unless content.include?('DispatchQueue') || content.include?('NSLock')
  end
end

# Memory management validation
MODIFIED_FILES.each do |file|
  next unless file.end_with?('.swift')
  content = File.read(file)
  
  if content.include?('class')
    warn "Memory management implementation missing" unless content.include?('deinit')
    warn "Weak reference recommended" if content.match(/var delegate/) && !content.match(/weak var delegate/)
  end
end