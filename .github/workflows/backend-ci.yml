name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - 'src/audio/**'
      - 'src/ai/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - 'src/audio/**'
      - 'src/ai/**'

env:
  DOCKER_REGISTRY: ghcr.io
  NODE_VERSION: '18.x'
  CUDA_VERSION: '12.0'
  COVERAGE_THRESHOLD: '90'
  AUDIO_QUALITY_THRESHOLD: '99.995'
  AI_MODEL_ACCURACY: '95'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest-gpu
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup CUDA toolkit
        uses: nvidia/cuda-toolkit@v1
        with:
          cuda: ${{ env.CUDA_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm install @tensorflow/tfjs-node-gpu@2.13.0 node-cuda@0.7.0

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: |
          npm run test:cov
          node scripts/validate-coverage.js ${{ env.COVERAGE_THRESHOLD }}
        env:
          CUDA_VISIBLE_DEVICES: 0
          AUDIO_PROCESSING_CONFIG: ${{ secrets.AUDIO_PROCESSING_CONFIG }}

      - name: Run AI model validation
        run: |
          npm run test:ai-models
          node scripts/validate-ai-accuracy.js ${{ env.AI_MODEL_ACCURACY }}
        env:
          AI_MODEL_VERSION: ${{ vars.AI_MODEL_VERSION }}

      - name: Run audio quality tests
        run: |
          npm run test:audio-quality
          node scripts/validate-audio-quality.js ${{ env.AUDIO_QUALITY_THRESHOLD }}

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          AUDIO_PROCESSING_CONFIG: ${{ secrets.AUDIO_PROCESSING_CONFIG }}

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Snyk
        uses: snyk/actions/setup@v1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk scan
        run: |
          snyk test --all-projects
          snyk monitor --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run container scan
        run: |
          snyk container test ${{ env.DOCKER_REGISTRY }}/tald-unia-backend:latest
          snyk container monitor ${{ env.DOCKER_REGISTRY }}/tald-unia-backend:latest

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: snyk-reports/

  build_container:
    name: Build Container
    needs: [build_and_test, security_scan]
    runs-on: ubuntu-latest-gpu
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:latest
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
          build-args: |
            CUDA_VERSION=${{ env.CUDA_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          target: production
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          sbom: true
          provenance: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'